C51 COMPILER V8.08   PWMLED                                                                06/11/2017 10:06:40 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE PWMLED
OBJECT MODULE PLACED IN ..\output\pwmled.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\source\pwmled.c BROWSE DEBUG OBJECTEXTEND PRINT(.\pwmled.lst) OBJECT(..\
                    -output\pwmled.obj)

line level    source

   1          #define _PWMLED_C
   2          
   3          #include "config.h"
   4          #include "pwmled.h"
   5          
   6          ledState mLedState = LED_Breath;
   7          
   8          uint8 HighRH = 0;  //高电平重载值的高字节
   9          uint8 HighRL = 0;  //高电平重载值的低字节
  10          uint8 LowRH  = 0;  //低电平重载值的高字节
  11          uint8 LowRL  = 0;  //低电平重载值的低字节
  12          
  13          uint32 PeriodCnt = 0;
  14          
  15          void ConfigTimerTwo() //定时器二 50ms
  16          {
  17   1      
  18   1              RCAP2H = (uint8)((65535 - SYS_CLK/1000*50 + 12) >> 8); //设置定时器二为显示器件定时器
  19   1              RCAP2L = (uint8)(65535 - SYS_CLK/1000*50 + 12);
  20   1      
  21   1              T2CON = 0x00;
  22   1      
  23   1              TH2 = RCAP2H;
  24   1              TL2 = RCAP2L;
  25   1      
  26   1              TR2 = 0;        // T2中断暂时关闭，等待调用
  27   1              //PT2 = 1;//设置LED显示处于最高中断优先级
  28   1              ET2 = 0;
  29   1      }
  30          
  31          void ConfigPWM(uint16 fr, uint8 dc)
  32          {
  33   1          uint16 high, low;
  34   1          
  35   1          PeriodCnt = SYS_CLK / fr; //计算一个周期所需的计数值
  36   1          high = (PeriodCnt*dc) / 100;    //计算高电平所需的计数值
  37   1          low  = PeriodCnt - high;        //计算低电平所需的计数值
  38   1          high = 65536 - high + 12;       //计算高电平的定时器重载值并补偿中断延时
  39   1          low  = 65536 - low  + 12;       //计算低电平的定时器重载值并补偿中断延时
  40   1          HighRH = (uint8)(high>>8); //高电平重载值拆分为高低字节
  41   1          HighRL = (uint8)high;
  42   1          LowRH  = (uint8)(low>>8);  //低电平重载值拆分为高低字节
  43   1          LowRL  = (uint8)low;
  44   1          TMOD &= 0x0F;   //清零T1的控制位
  45   1          TMOD |= 0x10;   //配置T1为模式1
  46   1          TH1 = HighRH;   //加载T1重载值
  47   1          TL1 = HighRL;
  48   1          ET1 = 0;        //关闭T1中断，等待调用
  49   1          TR1 = 0;        //关闭T1
  50   1          PWMOUT = 1;     //输出高电平
  51   1      }
  52          void AdjustDutyCycle(uint8 dc)
  53          {
  54   1              uint16 high, low;
C51 COMPILER V8.08   PWMLED                                                                06/11/2017 10:06:40 PAGE 2   

  55   1      
  56   1              high = (PeriodCnt*dc)/100;
  57   1              low = PeriodCnt - high;
  58   1              high = 65536 - high + 12;
  59   1              low = 65536 - low + 12;
  60   1              HighRH = (uint8)(high >> 8);
  61   1              HighRL = (uint8)high;
  62   1              LowRH = (uint8)(low >> 8);
  63   1              LowRL = (uint8)low;
  64   1      }
  65          void InterruptTimerOne() interrupt 3
  66          {
  67   1          if (PWMOUT == 1)  //当前输出为高电平时，装载低电平值并输出低电平
  68   1          {
  69   2              TH1 = LowRH;
  70   2              TL1 = LowRL;
  71   2              PWMOUT = 0;
  72   2          }
  73   1          else              //当前输出为低电平时，装载高电平值并输出高电平
  74   1          {
  75   2              TH1 = HighRH;
  76   2              TL1 = HighRL;
  77   2              PWMOUT = 1;
  78   2          }
  79   1      }
  80          
  81          void InterruptTimerTwo() interrupt 5
  82          {
  83   1              uint8 code table[16] = {
  84   1              1, 5, 10,18, 23, 30, 41, 51, 60, 68, 75, 81, 86, 90, 93, 95
  85   1              };
  86   1              static bit dir = 0;
  87   1              static uint8 index = 0, flashCnt = 0;
  88   1      
  89   1              TF2 = 0;
  90   1      
  91   1              switch(mLedState){
  92   2                      case LED_Breath:
  93   2                              AdjustDutyCycle(table[index]);
  94   2                              if(dir == 0)
  95   2                              {
  96   3                                      index++;
  97   3                                      if(index >= 15)
  98   3                                      {
  99   4                                              dir = 1;
 100   4                                      }
 101   3                              }else{
 102   3                                      index--;
 103   3                                      if(index == 0)
 104   3                                      {
 105   4                                              dir = 0;
 106   4                                      }
 107   3                              }
 108   2                              break;
 109   2                      case LED_Flash:
 110   2                              flashCnt++;
 111   2                              if(flashCnt > 10){
 112   3                                      flashCnt = 0;
 113   3                                      PWMOUT = ~PWMOUT;
 114   3                              }
 115   2                              break;
 116   2                      case LED_Off:
C51 COMPILER V8.08   PWMLED                                                                06/11/2017 10:06:40 PAGE 3   

 117   2                              if(!PWMOUT)
 118   2                              {
 119   3                                      PWMOUT = 1;
 120   3                              }
 121   2                              break;
 122   2                      default: break;
 123   2              }
 124   1      }
 125          
 126          void InitLED()
 127          {
 128   1              ConfigPWM(100, 10);  //配置并启动PWM
 129   1              ConfigTimerTwo();    //用T2定时调整占空比
 130   1      }
 131          
 132          void LEDBreath()
 133          {
 134   1              mLedState = LED_Breath;
 135   1      
 136   1              ET1 = 1;
 137   1              TR1 = 1; //开启定时器中断1（PWM亮度）
 138   1      
 139   1              ET2 = 1; //开启定时器中断2 （PWM显示间隔）
 140   1              TR2 = 1;
 141   1      }
 142          
 143          void LEDFlash()
 144          {
 145   1              mLedState = LED_Flash;
 146   1      
 147   1              PWMOUT = 0;
 148   1      
 149   1              ET1 = 0;
 150   1              TR1 = 0; //关闭定时器中断1，Flash不使用该中断
 151   1      
 152   1              ET2 = 1;
 153   1              TR2 = 1; //开启定时器2,500ms闪烁
 154   1      }
 155          
 156          void LEDOff()
 157          {
 158   1              mLedState = LED_Off;
 159   1      
 160   1              ET1 = 0;
 161   1              TR1 = 0; //关闭定时器中断1，Flash不使用该中断
 162   1      
 163   1              ET2 = 0;
 164   1              TR2 = 0; //关闭定时器2,500ms闪烁
 165   1      
 166   1              PWMOUT = 1;     //关闭小灯
 167   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    389    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.

C51 COMPILER V8.08   PWMLED                                                                06/11/2017 10:06:40 PAGE 4   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
