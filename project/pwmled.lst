C51 COMPILER V8.08   PWMLED                                                                06/01/2017 17:37:53 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE PWMLED
OBJECT MODULE PLACED IN ..\output\pwmled.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\source\pwmled.c BROWSE DEBUG OBJECTEXTEND PRINT(.\pwmled.lst) OBJECT(..\
                    -output\pwmled.obj)

line level    source

   1          #define _PWMLED_C
   2          
   3          #include "config.h"
   4          #include "pwmled.h"
   5          
   6          ledState mLedState = LED_Breath;
   7          
   8          sbit PWMOUT = P3^3;
   9          
  10          uint8 HighRH = 0;  //高电平重载值的高字节
  11          uint8 HighRL = 0;  //高电平重载值的低字节
  12          uint8 LowRH  = 0;  //低电平重载值的高字节
  13          uint8 LowRL  = 0;  //低电平重载值的低字节
  14          
  15          uint32 PeriodCnt = 0;
  16          
  17          void ConfigTimerTwo() //定时器二 50ms
  18          {
  19   1      
  20   1              RCAP2H = (uint8)((65535 - SYS_CLK/1000*50 + 12) >> 8); //设置定时器二为显示器件定时器
  21   1              RCAP2L = (uint8)(65535 - SYS_CLK/1000*50 + 12);
  22   1      
  23   1              T2CON = 0x00;
  24   1      
  25   1              TH2 = RCAP2H;
  26   1              TL2 = RCAP2L;
  27   1      
  28   1              TR2 = 0;        // T2中断暂时关闭，等待调用
  29   1              //PT2 = 1;//设置LED显示处于最高中断优先级
  30   1              ET2 = 0;
  31   1      }
  32          
  33          void ConfigPWM(uint16 fr, uint8 dc)
  34          {
  35   1          uint16 high, low;
  36   1          
  37   1          PeriodCnt = SYS_CLK / fr; //计算一个周期所需的计数值
  38   1          high = (PeriodCnt*dc) / 100;    //计算高电平所需的计数值
  39   1          low  = PeriodCnt - high;        //计算低电平所需的计数值
  40   1          high = 65536 - high + 12;       //计算高电平的定时器重载值并补偿中断延时
  41   1          low  = 65536 - low  + 12;       //计算低电平的定时器重载值并补偿中断延时
  42   1          HighRH = (uint8)(high>>8); //高电平重载值拆分为高低字节
  43   1          HighRL = (uint8)high;
  44   1          LowRH  = (uint8)(low>>8);  //低电平重载值拆分为高低字节
  45   1          LowRL  = (uint8)low;
  46   1          TMOD &= 0x0F;   //清零T1的控制位
  47   1          TMOD |= 0x10;   //配置T1为模式1
  48   1          TH1 = HighRH;   //加载T1重载值
  49   1          TL1 = HighRL;
  50   1          ET1 = 0;        //关闭T1中断，等待调用
  51   1          TR1 = 0;        //关闭T1
  52   1          PWMOUT = 1;     //输出高电平
  53   1      }
  54          void AdjustDutyCycle(uint8 dc)
C51 COMPILER V8.08   PWMLED                                                                06/01/2017 17:37:53 PAGE 2   

  55          {
  56   1              uint16 high, low;
  57   1      
  58   1              high = (PeriodCnt*dc)/100;
  59   1              low = PeriodCnt - high;
  60   1              high = 65536 - high + 12;
  61   1              low = 65536 - low + 12;
  62   1              HighRH = (uint8)(high >> 8);
  63   1              HighRL = (uint8)high;
  64   1              LowRH = (uint8)(low >> 8);
  65   1              LowRL = (uint8)low;
  66   1      }
  67          void InterruptTimerOne() interrupt 3
  68          {
  69   1          if (PWMOUT == 1)  //当前输出为高电平时，装载低电平值并输出低电平
  70   1          {
  71   2              TH1 = LowRH;
  72   2              TL1 = LowRL;
  73   2              PWMOUT = 0;
  74   2          }
  75   1          else              //当前输出为低电平时，装载高电平值并输出高电平
  76   1          {
  77   2              TH1 = HighRH;
  78   2              TL1 = HighRL;
  79   2              PWMOUT = 1;
  80   2          }
  81   1      }
  82          
  83          void InterruptTimerTwo() interrupt 5
  84          {
  85   1              uint8 code table[16] = {
  86   1              1, 5, 10,18, 23, 30, 41, 51, 60, 68, 75, 81, 86, 90, 93, 95
  87   1              };
  88   1              static bit dir = 0;
  89   1              static uint8 index = 0, flashCnt = 0;
  90   1      
  91   1              TF2 = 0;
  92   1      
  93   1              switch(mLedState){
  94   2                      case LED_Breath:
  95   2                              AdjustDutyCycle(table[index]);
  96   2                              if(dir == 0)
  97   2                              {
  98   3                                      index++;
  99   3                                      if(index >= 15)
 100   3                                      {
 101   4                                              dir = 1;
 102   4                                      }
 103   3                              }else{
 104   3                                      index--;
 105   3                                      if(index == 0)
 106   3                                      {
 107   4                                              dir = 0;
 108   4                                      }
 109   3                              }
 110   2                              break;
 111   2                      case LED_Flash:
 112   2                              flashCnt++;
 113   2                              if(flashCnt > 10){
 114   3                                      flashCnt = 0;
 115   3                                      PWMOUT = ~PWMOUT;
 116   3                              }
C51 COMPILER V8.08   PWMLED                                                                06/01/2017 17:37:53 PAGE 3   

 117   2                              break;
 118   2                      case LED_Off:
 119   2                              if(!PWMOUT)
 120   2                              {
 121   3                                      PWMOUT = 1;
 122   3                              }
 123   2                              break;
 124   2                      default: break;
 125   2              }
 126   1      }
 127          
 128          void InitLED()
 129          {
 130   1              ConfigPWM(100, 10);  //配置并启动PWM
 131   1              ConfigTimerTwo();    //用T2定时调整占空比
 132   1      }
 133          
 134          void LEDBreath()
 135          {
 136   1              mLedState = LED_Breath;
 137   1      
 138   1              ET1 = 1;
 139   1              TR1 = 1; //开启定时器中断1（PWM亮度）
 140   1      
 141   1              ET2 = 1; //开启定时器中断2 （PWM显示间隔）
 142   1              TR2 = 1;
 143   1      }
 144          
 145          void LEDFlash()
 146          {
 147   1              mLedState = LED_Flash;
 148   1      
 149   1              PWMOUT = 1;
 150   1      
 151   1              ET1 = 0;
 152   1              TR1 = 0; //关闭定时器中断1，Flash不使用该中断
 153   1      
 154   1              ET2 = 1;
 155   1              TR2 = 1; //开启定时器2,500ms闪烁
 156   1      }
 157          
 158          void LEDOff()
 159          {
 160   1              mLedState = LED_Off;
 161   1      
 162   1              ET1 = 0;
 163   1              TR1 = 0; //关闭定时器中断1，Flash不使用该中断
 164   1      
 165   1              ET2 = 0;
 166   1              TR2 = 0; //关闭定时器2,500ms闪烁
 167   1      
 168   1              PWMOUT = 1;     //关闭小灯
 169   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    389    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11       1
   IDATA SIZE       =   ----    ----
C51 COMPILER V8.08   PWMLED                                                                06/01/2017 17:37:53 PAGE 4   

   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
